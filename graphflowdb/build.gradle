plugins {
    id "java"
    id "antlr"
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.8.2"
}

apply plugin: 'jacoco'

group 'ca.waterloo.dsg'
version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7"

    compile 'com.google.code.gson:gson:2.8.2'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.6.0'
    compile 'com.google.guava:guava:28.1-jre'
    compile 'org.projectlombok:lombok:1.18.12'

    testCompile 'org.junit.jupiter:junit-jupiter:5.6.2'
    testCompile 'org.junit.platform:junit-platform-launcher:1.2.0'
    testCompile "org.mockito:mockito-core:3.3.3"
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/jacoco/coverage")
    }
}

coveralls {
    jacocoReportPath "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

// ANTLR4 configuration.
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [
        "-long-messages",                                   // show exception details
        "-visitor",                                         // generate parse tree visitor classes
        "-package", "ca.waterloo.dsg.graphflow.grammar"     // specify package for generated classes
    ]
}
// Add the source files generated by ANTLR4 to the gradle sourcesets.
sourceSets.main.java.srcDirs += "$buildDir/generated-src/antlr/main"

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
    // Enable additional compile time warnings.
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-cast" << "-Xlint:-serial"
    // Enable incremental builds. Disable if giving errors.
    options.incremental = true
}

apply plugin: 'application'
// Disable the default assembly tasks.
startScripts.enabled = false
run.enabled = false
distZip.enabled = false
distTar.enabled = false
// Create the executables.
def scripts = [
    'dataset-serializer'    : 'ca.waterloo.dsg.graphflow.runner.DatasetSerializer',
    'benchmark-executor'    : 'ca.waterloo.dsg.graphflow.runner.QueryRunner'
]
scripts.each() { fileName, className ->
    tasks.create(name: fileName, type: CreateStartScripts) {
        mainClassName = className
        applicationName = fileName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(tasks[fileName])
        fileMode = 0755
    }
}

// Define specific gradle version.
task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}

test {
    test {
        useJUnitPlatform()
        testLogging {
            events "skipped", "failed"
        }
    }
}
